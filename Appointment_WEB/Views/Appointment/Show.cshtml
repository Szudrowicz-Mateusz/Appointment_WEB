@model List<Appointment_WEB.Models.AppointmentModel>

<style>
    .table-container {
        overflow-x: auto;
        max-width: 100%;
    }

    .appointments-table {
        border-collapse: collapse;
        width: 100%;
    }

        .appointments-table th, .appointments-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

    .appointment {
        position: relative;
        color: #fff;
        border-radius: 4px;
        padding: 5px;
        background: linear-gradient(to bottom, #007bff, #0056b3); /* Example gradient from blue to a darker blue */
    }
    
    .appointment:hover {
            color: #fff;
            border-radius: 4px;
            padding: 5px;
            background: linear-gradient(to bottom, #0056b3,#03A76B);
    }

    .title {
        font-weight: bold;
        font-size: 1.2em;
    }

    .description{
        font-size: 0.8em;
    }

    .table_id{
        position: absolute;
        bottom: 0;
        right: 0;
        font-size:0.6em;
    }

    /* The css for JS */
    .hidden {
        display: none;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.7); /* A semi-transparent background to cover the table */
        z-index: 1000; /* Adjust the z-index as needed to cover the table */
    }

    .new-div {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 25%;
        height: 15%;
        border: 1px solid #000;
        border-radius:25px;
        background: linear-gradient(to bottom, #0056b3,#03A76B);
        padding: 10px;
        z-index: 9999; /* Optional: use a z-index to control stacking order */
        text-align:center;
    }

    .button-container {
        display: flex; /* Display the buttons in a row */
        gap: 0.2em; /* Add spacing between the buttons */
        justify-content: center; /* Adjust alignment to the right */
    }

    .editButton {
        background-color:grey;
    }
    .editButton:hover{
        background-color:darkgrey;
    }

    .deleteButton {
        background-color:red;
    }
    .deleteButton{
        background-color:darkred;
    }

</style>

<div class="table-container">
    <table class="appointments-table">
        <thead>
            <tr>
                <th></th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
                <th>Sunday</th>
            </tr>
        </thead>
        <tbody>
            @for (var hour = 8; hour <= 20; hour++)
            {
                <tr>
                    <th>@hour:00 AM</th>
                    @for (var day = 0; day <= 6; day++)
                    {

                        <td>
                            @if (true)
                            {
                                
                                var appointment = Model.FirstOrDefault(a =>
                                a.day == (Day)day &&
                                a.startTime <= new TimeSpan(hour,0,0) && a.endTime > new TimeSpan(hour,0,0)
                                );

                                <div class="appointment-cell">
                                    @if (appointment != null)
                                    {
                                        <div class="appointment">
                                            <div class="title">@appointment.title</div>
                                            <div class="description">@appointment.description</div>
                                            <div class="table_id">ID: @appointment.id</div>
                                        </div>
                                    }
                                </div>
                            }

                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
</div>

 <!-- The Assinemnt when we click on him -->
<div id="newDivContainer" class="hidden">
    <div class="new-div">
        <h3 id="title"></h3>
        <p id="description"></p>
        <div class="button-container">

            @using (Html.BeginForm("Delete", "Appointment", FormMethod.Post))
            {
                @Html.Hidden("Id", null, new { id = "appointmentId" }) <!-- Hidden input field for appointment ID -->
                <button class="deleteButton" type="submit">Delete</button>
            }
        </div>
    </div>
</div>


<script>

    const newDivContainer = document.getElementById('newDivContainer');
    const titleElement = document.getElementById('title');
    const descriptionElement = document.getElementById('description');
    const appointmentIdElement = document.getElementById('appointmentId');

    document.querySelectorAll('.appointment').forEach(appointmentDiv => {
        appointmentDiv.addEventListener('click', function () {
            // Get appointment details from the appointment div
            const title = appointmentDiv.querySelector('.title').textContent;
            const description = appointmentDiv.querySelector('.description').textContent;
            const appointmentId = appointmentDiv.querySelector('.table_id').textContent.replace('ID: ', '');

            // Populate the newDivContainer with appointment details
            titleElement.textContent = title;
            descriptionElement.textContent = description;
            appointmentIdElement.value = appointmentId;

            // Show the newDivContainer
            newDivContainer.style.display = 'block';
        });
    });

    // To close the newDivContainer when clicking outside it
    document.getElementById('newDivContainer').addEventListener('click', function (event) {
        if (event.target === this) {
            newDivContainer.style.display = 'none';
        }
    });

</script>
